{"version":3,"sources":["../../../src/services/updateEvents/jsonOdd.js"],"names":["axiosJsonOdd","create","headers","jsonOddApiKey","updateEventOddFromJsonOdd","isActivate","console","log","findOne","name","then","res","options","jsonOddSports","jsoonEvents","get","data","catch","nba","filter","event","Sport","allSports","concat","isEmpty","jsonEvents","jsonSport","find","idx","activate","theSport","sport","theMatchTime","utc","MatchTime","add","endOf","isBefore","isAfter","theLeague","hasOwnProperty","League","Name","league","theRegion","DisplayRegion","theAwayPitcher","AwayPitcher","theHomePitcher","HomePitcher","theAwayROT","AwayROT","theHomeROT","HomeROT","awayLogo","AwayTeam","split","join","toLowerCase","replace","team","region","detail","HomeTeam","homeLogo","folderName","awayLogoExists","findOneAndUpdate","upsert","homeLogoExists","Odds","odd","thePeriod","OddType","theUniqueID","format","newEvent","ID","uniqueID","provider","bookmaker","SiteID","toString","period","matchTime","away","awayROT","awayPitcher","home","homeROT","homePitcher","score","awayMoneyLine","Number","MoneyLineAway","awaySpreadPoint","PointSpreadAway","awaySpreadLine","PointSpreadAwayLine","homeMoneyLine","MoneyLineHome","homeSpreadPoint","PointSpreadHome","homeSpreadLine","PointSpreadHomeLine","totalOverPoint","TotalNumber","totalOverLine","OverLine","totalUnderPoint","totalUnderLine","UnderLine","drawLine","DrawLine","cutOffAt","isFinished","status","updatedAt","title","content"],"mappings":"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","file":"jsonOdd.js","sourcesContent":["import config from '../../config';\nimport Event from '../../models/Event';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport moment from 'moment';\nimport renameEventPeriod from '../../utils/functions/renameEventPeriod';\nimport SystemLog from '../../models/SystemLog';\nimport Provider from '../../models/Provider';\nimport LogoCollect from '../../models/LogoCollect';\n\nimport { dirname } from '../../index';\nimport fileExists from 'file-exists';\n\n\nconst axiosJsonOdd = axios.create({ headers: {'JsonOdds-API-Key': config.jsonOddApiKey}});\n\nconst updateEventOddFromJsonOdd = async () => {\n\ttry{\n\t\tif(!await Provider.isActivate('jo')) return; \n\t\t//eslint-disable-next-line\n\t\tconsole.log('update jsonOdd odd');\n\t\tconst jsonOddSports = await Provider.findOne({ name: 'jo' }).then(res => res.options);\n\n\t\tlet jsoonEvents = []\n\t\tconst nba = await axiosJsonOdd.get('https://jsonodds.com/api/odds/nba?source=4').then(res => res.data).catch(() => []);\n\t\tconst allSports = await axiosJsonOdd.get('https://jsonodds.com/api/odds?source=3').then(res => res.data.filter(event => event.Sport !== 1 )).catch(() => []);\n\n\t\tjsoonEvents = nba.concat(allSports)\n\n\t\tif(_.isEmpty(jsonEvents)) return;\n\t\tfor( let event of jsonEvents ) {\n\t\t\tconst jsonSport = _.find(jsonOddSports, { idx: event.Sport, activate: true } );\n\t\t\tif(!jsonSport) continue;\n\t\t\tconst theSport = jsonSport.sport;\n\t\t\tconst theMatchTime = moment.utc(event.MatchTime);\n\t\t\tif(moment().add(5, 'days').endOf('day').isBefore(theMatchTime)) continue;\n\t\t\tif(moment().isAfter(theMatchTime)) continue;\n\t\t\tif(moment().add(5, 'd').endOf('day').isBefore(theMatchTime)) continue;\n\t\t\tconst theLeague = event.Sport === 7 ? ( event.hasOwnProperty('League') && event.League.hasOwnProperty('Name') ? event.League.Name : '' ) : jsonSport.league;\n\t\t\tif(theLeague === '') continue;\n\t\t\tconst theRegion = event.Sport === 7 ? event.DisplayRegion : null;\n\t\t\tconst theAwayPitcher = theSport === 'Baseball' ? (!_.isEmpty(event.AwayPitcher) ? event.AwayPitcher : 'Action') : null;\n\t\t\tconst theHomePitcher = theSport === 'Baseball' ? (!_.isEmpty(event.HomePitcher) ? event.HomePitcher : 'Action') : null;\n\t\t\tconst theAwayROT = event.AwayROT;\n\t\t\tconst theHomeROT = event.HomeROT;\n\n\t\t\t//\n\t\t\tconst awayLogo = {\n\t\t\t\tname: event.AwayTeam.split(' ').join('_').toLowerCase().replace(/\\.|\\'|\\&/g, ''),\n\t\t\t\tteam: event.AwayTeam,\n\t\t\t\tsport: theSport,\n\t\t\t\tleague: theLeague,\n\t\t\t\tregion: theRegion,\n\t\t\t\tdetail: `${event.AwayTeam} ${theAwayROT} vs ${event.HomeTeam} ${theHomeROT}`\n\t\t\t};\n\t\t\tconst homeLogo = {\n\t\t\t\tname: event.HomeTeam.split(' ').join('_').toLowerCase().replace(/\\.|\\'|\\&/g, ''),\n\t\t\t\tteam: event.HomeTeam,\n\t\t\t\tsport: theSport,\n\t\t\t\tleague: theLeague,\n\t\t\t\tregion: theRegion,\n\t\t\t\tdetail: `${event.AwayTeam} ${theAwayROT} vs ${event.HomeTeam} ${theHomeROT}`\n\t\t\t};\n\n\t\t\tconst folderName = (theLeague === 'NCAAB' || theLeague === 'NCAAF') ? 'NCAA' : theSport;\n\n\t\t\tconst awayLogoExists = await fileExists(dirname + `/public/images/teamlogos/${folderName}/${awayLogo.name}.png`);\n\t\t\tif(!awayLogoExists) { await LogoCollect.findOneAndUpdate({ name: awayLogo.name }, awayLogo, { upsert: true }); }\n\t\t\tconst homeLogoExists = await fileExists(dirname + `/public/images/teamlogos/${folderName}/${homeLogo.name}.png`);\n\t\t\tif(!homeLogoExists) { await LogoCollect.findOneAndUpdate({ name: homeLogo.name }, homeLogo, { upsert: true }); }\n\t\t\t//\n\n\n\t\t\tfor( let odd of event.Odds ) {\n\t\t\t\tconst thePeriod = renameEventPeriod(odd.OddType); if(thePeriod === 'unknow') continue;\n\t\t\t\tconst theUniqueID = `${moment(theMatchTime).format('MMDDYY')}_${theAwayROT}_${theHomeROT}_${theSport}_${thePeriod.replace(/\\s/g,'')}`;\n\t\t\t\tlet newEvent = {\n\t\t\t\t\tID: odd.ID,\n\t\t\t\t\tuniqueID: theUniqueID,\n\t\t\t\t\tprovider: 'jo',\n\t\t\t\t\tbookmaker: odd.SiteID.toString(),\n\t\t\t\t\tsport: theSport,\n\t\t\t\t\tperiod: thePeriod,\n\t\t\t\t\tleague: theLeague,\n\t\t\t\t\tregion: theRegion,\n\t\t\t\t\tmatchTime: theMatchTime,\n\t\t\t\t\tteam: {\n\t\t\t\t\t\taway: event.AwayTeam,\n\t\t\t\t\t\tawayROT: theAwayROT,\n\t\t\t\t\t\tawayPitcher: theAwayPitcher,\n\t\t\t\t\t\thome: event.HomeTeam,\n\t\t\t\t\t\thomeROT: theHomeROT,\n\t\t\t\t\t\thomePitcher: theHomePitcher,\n\t\t\t\t\t},\n\t\t\t\t\tscore: {\n\t\t\t\t\t\thome: null,\n\t\t\t\t\t\taway: null,\n\t\t\t\t\t},\n\t\t\t\t\todd: {\n\t\t\t\t\t\tawayMoneyLine: Number(odd.MoneyLineAway) || null,\n\t\t\t\t\t\tawaySpreadPoint: Number(odd.PointSpreadAway) || null,\n\t\t\t\t\t\tawaySpreadLine: Number(odd.PointSpreadAwayLine) || null,\n\t\t\t\t\t\thomeMoneyLine: Number(odd.MoneyLineHome) || null,\n\t\t\t\t\t\thomeSpreadPoint: Number(odd.PointSpreadHome) || null,\n\t\t\t\t\t\thomeSpreadLine: Number(odd.PointSpreadHomeLine) || null,\n\t\t\t\t\t\ttotalOverPoint: Number(odd.TotalNumber) || null,\n\t\t\t\t\t\ttotalOverLine: Number(odd.OverLine) || null,\n\t\t\t\t\t\ttotalUnderPoint: Number(odd.TotalNumber) || null,\n\t\t\t\t\t\ttotalUnderLine: Number(odd.UnderLine) || null,\n\t\t\t\t\t\tdrawLine: Number(odd.DrawLine) || null ,\n\t\t\t\t\t},\n\t\t\t\t\tcutOffAt: moment(theMatchTime),\n\t\t\t\t\tisFinished: false,\n\t\t\t\t\tstatus: 'Pending',\n\t\t\t\t\tupdatedAt: moment(),\n\t\t\t\t};\n\t\t\t\tawait Event.findOneAndUpdate({ uniqueID: newEvent.uniqueID }, newEvent, { upsert: true });\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\tawait SystemLog.create({ title: 'update json odd event failed', content: e, status: 'danger'});\n\t}\n};\n\nexport default updateEventOddFromJsonOdd;"]}